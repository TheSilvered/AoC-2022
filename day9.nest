|#| 'stdio.nest' = io
|#| 'stdsutil.nest' = su
|#| 'stdsequtil.nest' = sequ

'day9.txt' 'r' @io.open = data_file
data_file -1 @io.read '\n' @su.split = data
data_file @io.close

... 0 -> $data := i [
    data.(i) ' ' @su.split = data.(i)
    Int :: data.(i).1 = data.(i).1
]

(##n => n 0 < ? -:n : n) = abs
(##n => n 0 < ?  -1 : 1) = sign

#is_adjacent hx hy tx ty [
    => (tx hx - @abs 1 <=) (ty hy - @abs 1 <=) &&
]

#move_tail hx hy tx ty [
    hx hy tx ty @is_adjacent ? => { tx, ty }

    hx tx == ? [
        => { tx, hy ty + 2 / }
    ] :
    hy ty == ? [
        => { hx tx + 2 /, ty }
    ]

    => { tx (hx tx - @sign) +, ty (hy ty - @sign) + }
]

#add_position pos positions [
    null = positions.(pos.0 ';' pos.1 ><)
]

#part_one [
    {} = positions
    0 = hx = hy = tx = ty

    ... Iter :: data := move [
        ... move.1 [
            |> move.0 [
            ? 'U' [
                1 += hy
            ]
            ? 'D' [
                1 -= hy
            ]
            ? 'R' [
                1 += hx
            ]
            ? 'L' [
                1 -= hx
            ]
            ]

            hx hy tx ty @move_tail = new_pos positions @add_position
            new_pos.0 = tx
            new_pos.1 = ty
        ]
    ]

    >>> $positions
    >>> '\n'
]

#part_two [
    {} = positions
    <{}> = pos
    ... 10 [ pos { 11, 5 } + ]

    ... Iter :: data := move [
        ... move.1 [
            |> move.0 [
            ? 'U' [
                1 += pos.0 .1
            ]
            ? 'D' [
                1 -= pos.0 .1
            ]
            ? 'R' [
                1 += pos.0 .0
            ]
            ? 'L' [
                1 -= pos.0 .0
            ]
            ]

            ... 1 -> 10 := i [
                pos.(i 1 -).0 pos.(i 1 -).1 pos.(i).0 pos.(i).1 @move_tail = new_pos
                i 9 == ? new_pos positions @add_position
                new_pos.0 = pos.(i).0
                new_pos.1 = pos.(i).1
            ]
        ]
    ]

    >>> $positions
    >>> '\n'
]

@part_one
@part_two
